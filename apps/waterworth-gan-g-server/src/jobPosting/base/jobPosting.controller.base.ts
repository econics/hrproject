/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { JobPostingService } from "../jobPosting.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { JobPostingCreateInput } from "./JobPostingCreateInput";
import { JobPosting } from "./JobPosting";
import { JobPostingFindManyArgs } from "./JobPostingFindManyArgs";
import { JobPostingWhereUniqueInput } from "./JobPostingWhereUniqueInput";
import { JobPostingUpdateInput } from "./JobPostingUpdateInput";
import { ApplicantFindManyArgs } from "../../applicant/base/ApplicantFindManyArgs";
import { Applicant } from "../../applicant/base/Applicant";
import { ApplicantWhereUniqueInput } from "../../applicant/base/ApplicantWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class JobPostingControllerBase {
  constructor(
    protected readonly service: JobPostingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobPosting })
  @nestAccessControl.UseRoles({
    resource: "JobPosting",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createJobPosting(
    @common.Body() data: JobPostingCreateInput
  ): Promise<JobPosting> {
    return await this.service.createJobPosting({
      data: {
        ...data,

        department: data.department
          ? {
              connect: data.department,
            }
          : undefined,
      },
      select: {
        closeDate: true,
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        postedDate: true,
        requirements: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [JobPosting] })
  @ApiNestedQuery(JobPostingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "JobPosting",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async jobPostings(@common.Req() request: Request): Promise<JobPosting[]> {
    const args = plainToClass(JobPostingFindManyArgs, request.query);
    return this.service.jobPostings({
      ...args,
      select: {
        closeDate: true,
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        postedDate: true,
        requirements: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobPosting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "JobPosting",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async jobPosting(
    @common.Param() params: JobPostingWhereUniqueInput
  ): Promise<JobPosting | null> {
    const result = await this.service.jobPosting({
      where: params,
      select: {
        closeDate: true,
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        postedDate: true,
        requirements: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobPosting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "JobPosting",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateJobPosting(
    @common.Param() params: JobPostingWhereUniqueInput,
    @common.Body() data: JobPostingUpdateInput
  ): Promise<JobPosting | null> {
    try {
      return await this.service.updateJobPosting({
        where: params,
        data: {
          ...data,

          department: data.department
            ? {
                connect: data.department,
              }
            : undefined,
        },
        select: {
          closeDate: true,
          createdAt: true,

          department: {
            select: {
              id: true,
            },
          },

          description: true,
          id: true,
          postedDate: true,
          requirements: true,
          status: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobPosting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "JobPosting",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteJobPosting(
    @common.Param() params: JobPostingWhereUniqueInput
  ): Promise<JobPosting | null> {
    try {
      return await this.service.deleteJobPosting({
        where: params,
        select: {
          closeDate: true,
          createdAt: true,

          department: {
            select: {
              id: true,
            },
          },

          description: true,
          id: true,
          postedDate: true,
          requirements: true,
          status: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/applicants")
  @ApiNestedQuery(ApplicantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  async findApplicants(
    @common.Req() request: Request,
    @common.Param() params: JobPostingWhereUniqueInput
  ): Promise<Applicant[]> {
    const query = plainToClass(ApplicantFindManyArgs, request.query);
    const results = await this.service.findApplicants(params.id, {
      ...query,
      select: {
        appliedDate: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,

        jobPosting: {
          select: {
            id: true,
          },
        },

        lastName: true,
        phoneNumber: true,
        resume: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applicants")
  @nestAccessControl.UseRoles({
    resource: "JobPosting",
    action: "update",
    possession: "any",
  })
  async connectApplicants(
    @common.Param() params: JobPostingWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicants: {
        connect: body,
      },
    };
    await this.service.updateJobPosting({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applicants")
  @nestAccessControl.UseRoles({
    resource: "JobPosting",
    action: "update",
    possession: "any",
  })
  async updateApplicants(
    @common.Param() params: JobPostingWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicants: {
        set: body,
      },
    };
    await this.service.updateJobPosting({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applicants")
  @nestAccessControl.UseRoles({
    resource: "JobPosting",
    action: "update",
    possession: "any",
  })
  async disconnectApplicants(
    @common.Param() params: JobPostingWhereUniqueInput,
    @common.Body() body: ApplicantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicants: {
        disconnect: body,
      },
    };
    await this.service.updateJobPosting({
      where: params,
      data,
      select: { id: true },
    });
  }
}
