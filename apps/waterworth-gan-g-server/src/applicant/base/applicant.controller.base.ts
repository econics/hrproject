/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ApplicantService } from "../applicant.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApplicantCreateInput } from "./ApplicantCreateInput";
import { Applicant } from "./Applicant";
import { ApplicantFindManyArgs } from "./ApplicantFindManyArgs";
import { ApplicantWhereUniqueInput } from "./ApplicantWhereUniqueInput";
import { ApplicantUpdateInput } from "./ApplicantUpdateInput";
import { InterviewFindManyArgs } from "../../interview/base/InterviewFindManyArgs";
import { Interview } from "../../interview/base/Interview";
import { InterviewWhereUniqueInput } from "../../interview/base/InterviewWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ApplicantControllerBase {
  constructor(
    protected readonly service: ApplicantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Applicant })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createApplicant(
    @common.Body() data: ApplicantCreateInput
  ): Promise<Applicant> {
    return await this.service.createApplicant({
      data: {
        ...data,

        jobPosting: data.jobPosting
          ? {
              connect: data.jobPosting,
            }
          : undefined,
      },
      select: {
        appliedDate: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,

        jobPosting: {
          select: {
            id: true,
          },
        },

        lastName: true,
        phoneNumber: true,
        resume: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Applicant] })
  @ApiNestedQuery(ApplicantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async applicants(@common.Req() request: Request): Promise<Applicant[]> {
    const args = plainToClass(ApplicantFindManyArgs, request.query);
    return this.service.applicants({
      ...args,
      select: {
        appliedDate: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,

        jobPosting: {
          select: {
            id: true,
          },
        },

        lastName: true,
        phoneNumber: true,
        resume: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Applicant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async applicant(
    @common.Param() params: ApplicantWhereUniqueInput
  ): Promise<Applicant | null> {
    const result = await this.service.applicant({
      where: params,
      select: {
        appliedDate: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,

        jobPosting: {
          select: {
            id: true,
          },
        },

        lastName: true,
        phoneNumber: true,
        resume: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Applicant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateApplicant(
    @common.Param() params: ApplicantWhereUniqueInput,
    @common.Body() data: ApplicantUpdateInput
  ): Promise<Applicant | null> {
    try {
      return await this.service.updateApplicant({
        where: params,
        data: {
          ...data,

          jobPosting: data.jobPosting
            ? {
                connect: data.jobPosting,
              }
            : undefined,
        },
        select: {
          appliedDate: true,
          createdAt: true,
          email: true,
          firstName: true,
          id: true,

          jobPosting: {
            select: {
              id: true,
            },
          },

          lastName: true,
          phoneNumber: true,
          resume: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Applicant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteApplicant(
    @common.Param() params: ApplicantWhereUniqueInput
  ): Promise<Applicant | null> {
    try {
      return await this.service.deleteApplicant({
        where: params,
        select: {
          appliedDate: true,
          createdAt: true,
          email: true,
          firstName: true,
          id: true,

          jobPosting: {
            select: {
              id: true,
            },
          },

          lastName: true,
          phoneNumber: true,
          resume: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/interviews")
  @ApiNestedQuery(InterviewFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Interview",
    action: "read",
    possession: "any",
  })
  async findInterviews(
    @common.Req() request: Request,
    @common.Param() params: ApplicantWhereUniqueInput
  ): Promise<Interview[]> {
    const query = plainToClass(InterviewFindManyArgs, request.query);
    const results = await this.service.findInterviews(params.id, {
      ...query,
      select: {
        applicant: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        feedback: true,
        id: true,
        interviewer: true,
        status: true,
        time: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/interviews")
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "update",
    possession: "any",
  })
  async connectInterviews(
    @common.Param() params: ApplicantWhereUniqueInput,
    @common.Body() body: InterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interviews: {
        connect: body,
      },
    };
    await this.service.updateApplicant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/interviews")
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "update",
    possession: "any",
  })
  async updateInterviews(
    @common.Param() params: ApplicantWhereUniqueInput,
    @common.Body() body: InterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interviews: {
        set: body,
      },
    };
    await this.service.updateApplicant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/interviews")
  @nestAccessControl.UseRoles({
    resource: "Applicant",
    action: "update",
    possession: "any",
  })
  async disconnectInterviews(
    @common.Param() params: ApplicantWhereUniqueInput,
    @common.Body() body: InterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interviews: {
        disconnect: body,
      },
    };
    await this.service.updateApplicant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
