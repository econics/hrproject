/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PerformanceMetric } from "./PerformanceMetric";
import { PerformanceMetricCountArgs } from "./PerformanceMetricCountArgs";
import { PerformanceMetricFindManyArgs } from "./PerformanceMetricFindManyArgs";
import { PerformanceMetricFindUniqueArgs } from "./PerformanceMetricFindUniqueArgs";
import { CreatePerformanceMetricArgs } from "./CreatePerformanceMetricArgs";
import { UpdatePerformanceMetricArgs } from "./UpdatePerformanceMetricArgs";
import { DeletePerformanceMetricArgs } from "./DeletePerformanceMetricArgs";
import { Employee } from "../../employee/base/Employee";
import { PerformanceMetricService } from "../performanceMetric.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PerformanceMetric)
export class PerformanceMetricResolverBase {
  constructor(
    protected readonly service: PerformanceMetricService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PerformanceMetric",
    action: "read",
    possession: "any",
  })
  async _performanceMetricsMeta(
    @graphql.Args() args: PerformanceMetricCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PerformanceMetric])
  @nestAccessControl.UseRoles({
    resource: "PerformanceMetric",
    action: "read",
    possession: "any",
  })
  async performanceMetrics(
    @graphql.Args() args: PerformanceMetricFindManyArgs
  ): Promise<PerformanceMetric[]> {
    return this.service.performanceMetrics(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PerformanceMetric, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PerformanceMetric",
    action: "read",
    possession: "own",
  })
  async performanceMetric(
    @graphql.Args() args: PerformanceMetricFindUniqueArgs
  ): Promise<PerformanceMetric | null> {
    const result = await this.service.performanceMetric(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PerformanceMetric)
  @nestAccessControl.UseRoles({
    resource: "PerformanceMetric",
    action: "create",
    possession: "any",
  })
  async createPerformanceMetric(
    @graphql.Args() args: CreatePerformanceMetricArgs
  ): Promise<PerformanceMetric> {
    return await this.service.createPerformanceMetric({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PerformanceMetric)
  @nestAccessControl.UseRoles({
    resource: "PerformanceMetric",
    action: "update",
    possession: "any",
  })
  async updatePerformanceMetric(
    @graphql.Args() args: UpdatePerformanceMetricArgs
  ): Promise<PerformanceMetric | null> {
    try {
      return await this.service.updatePerformanceMetric({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PerformanceMetric)
  @nestAccessControl.UseRoles({
    resource: "PerformanceMetric",
    action: "delete",
    possession: "any",
  })
  async deletePerformanceMetric(
    @graphql.Args() args: DeletePerformanceMetricArgs
  ): Promise<PerformanceMetric | null> {
    try {
      return await this.service.deletePerformanceMetric(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(
    @graphql.Parent() parent: PerformanceMetric
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
